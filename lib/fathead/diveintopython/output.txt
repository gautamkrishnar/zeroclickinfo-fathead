Coercing Integers To Floats And Vice-Versa	A							http://www.diveintopython3.net/native-datatypes.html			As you just saw, some operators (like addition) will coerce integers to floating point numbers as needed. You can also coerce them by yourself.<br><pre><code>>>> float(2) \n2.0\n>>> int(2.0) \n2\n>>> int(2.5) \n2\n>>> int(-2.5) \n-2\n>>> 1.12345678901234567890 \n1.1234567890123457\n>>> type(1000000000000000) \n<class 'int'></code></pre>	http://www.diveintopython3.net/native-datatypes.html#number-coercion
Coerce Integers To Floats And Vice-Versa	R	Coercing Integers To Floats And Vice-Versa										
Common Numerical Operations	A							http://www.diveintopython3.net/native-datatypes.html			You can do all kinds of things with numbers.<br><pre><code>>>> 11 / 2 \n5.5\n>>> 11 // 2 \n5\n>>> −11 // 2 \n−6\n>>> 11.0 // 2 \n5.0\n>>> 11 ** 2 \n121\n>>> 11 % 2 \n1</code></pre>	http://www.diveintopython3.net/native-datatypes.html#common-numerical-operations
Fractions	A							http://www.diveintopython3.net/native-datatypes.html			Python isn’t limited to integers and floating point numbers. It can also do all the fancy math you learned in high school and promptly forgot about.<br><pre><code>>>> import fractions \n>>> x = fractions.Fraction(1, 3) \n>>> x\nFraction(1, 3)\n>>> x * 2 \nFraction(2, 3)\n>>> fractions.Fraction(6, 4) \nFraction(3, 2)\n>>> fractions.Fraction(0, 0) \nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\n  File "fractions.py", line 96, in __new__\n    raise ZeroDivisionError('Fraction(%s, 0)' % numerator)\nZeroDivisionError: Fraction(0, 0)</code></pre>	http://www.diveintopython3.net/native-datatypes.html#fractions
Trigonometry	A							http://www.diveintopython3.net/native-datatypes.html			You can also do basic trigonometry in Python.<br><pre><code>>>> import math\n>>> math.pi \n3.1415926535897931\n>>> math.sin(math.pi / 2) \n1.0\n>>> math.tan(math.pi / 4) \n0.99999999999999989</code></pre>	http://www.diveintopython3.net/native-datatypes.html#trig
Numbers In A Boolean Context	A							http://www.diveintopython3.net/native-datatypes.html			You can use numbers in a boolean context, such as an if statement. Zero values are false, and non-zero values are true.<br><pre><code>>>> def is_it_true(anything): \n...   if anything:\n...     print("yes, it's true")\n...   else:\n...     print("no, it's false")\n...\n>>> is_it_true(1) \nyes, it's true\n>>> is_it_true(-1)\nyes, it's true\n>>> is_it_true(0)\nno, it's false\n>>> is_it_true(0.1) \nyes, it's true\n>>> is_it_true(0.0)\nno, it's false\n>>> import fractions\n>>> is_it_true(fractions.Fraction(1, 2)) \nyes, it's true\n>>> is_it_true(fractions.Fraction(0, 1))\nno, it's false</code></pre>	http://www.diveintopython3.net/native-datatypes.html#numbers-in-a-boolean-context
Numbers In Boolean Context	R	Numbers In A Boolean Context										
Creating A List	A							http://www.diveintopython3.net/native-datatypes.html			Creating a list is easy: use square brackets to wrap a comma-separated list of values.<br><pre><code>>>> a_list = ['a', 'b', 'mpilgrim', 'z', 'example'] \n>>> a_list\n['a', 'b', 'mpilgrim', 'z', 'example']\n>>> a_list[0] \n'a'\n>>> a_list[4] \n'example'\n>>> a_list[-1] \n'example'\n>>> a_list[-3] \n'mpilgrim'</code></pre>	http://www.diveintopython3.net/native-datatypes.html#creatinglists
Create A List	R	Creating A List										
Creating List	R	Creating A List										
Create List	R	Creating A List										
Slicing A List	A							http://www.diveintopython3.net/native-datatypes.html			Once you’ve defined a list, you can get any part of it as a new list. This is called slicing the list.<br><pre><code>>>> a_list\n['a', 'b', 'mpilgrim', 'z', 'example']\n>>> a_list[1:3] \n['b', 'mpilgrim']\n>>> a_list[1:-1] \n['b', 'mpilgrim', 'z']\n>>> a_list[0:3] \n['a', 'b', 'mpilgrim']\n>>> a_list[:3] \n['a', 'b', 'mpilgrim']\n>>> a_list[3:] \n['z', 'example']\n>>> a_list[:] \n['a', 'b', 'mpilgrim', 'z', 'example']</code></pre>	http://www.diveintopython3.net/native-datatypes.html#slicinglists
Slice A List	R	Slicing A List										
Slicing List	R	Slicing A List										
Slice List	R	Slicing A List										
Adding Items To A List	A							http://www.diveintopython3.net/native-datatypes.html			There are four ways to add items to a list.<br><pre><code>>>> a_list = ['a']\n>>> a_list = a_list + [2.0, 3] \n>>> a_list \n['a', 2.0, 3]\n>>> a_list.append(True) \n>>> a_list\n['a', 2.0, 3, True]\n>>> a_list.extend(['four', 'Ω']) \n>>> a_list\n['a', 2.0, 3, True, 'four', 'Ω']\n>>> a_list.insert(0, 'Ω') \n>>> a_list\n['Ω', 'a', 2.0, 3, True, 'four', 'Ω']</code></pre>	http://www.diveintopython3.net/native-datatypes.html#extendinglists
Adding Items To List	R	Adding Items To A List										
Searching For Values In A List	A							http://www.diveintopython3.net/native-datatypes.html			Wait, what? That’s right: the index() method raises an exception if it doesn’t find the value in the list. This is notably different from most languages, which will return some invalid index (like -1). While this may seem annoying at first, I think you will come to appreciate it. It means your program will crash at the source of the problem instead of failing strangely and silently later. Remember, -1 is a valid list index. If the index() method returned -1, that could lead to some not-so-fun debugging sessions!<br><pre><code>>>> a_list = ['a', 'b', 'new', 'mpilgrim', 'new']\n>>> a_list.count('new') \n2\n>>> 'new' in a_list \nTrue\n>>> 'c' in a_list\nFalse\n>>> a_list.index('mpilgrim') \n3\n>>> a_list.index('new') \n2\n>>> a_list.index('c') \nTraceback (innermost last):\n  File "<interactive input>", line 1, in ?\nValueError: list.index(x): x not in list</code></pre>	http://www.diveintopython3.net/native-datatypes.html#searchinglists
Search For Values In A List	R	Searching For Values In A List										
Searching For Values In List	R	Searching For Values In A List										
Search For Values In List	R	Searching For Values In A List										
Removing Items From A List	A							http://www.diveintopython3.net/native-datatypes.html			Lists can expand and contract automatically. You’ve seen the expansion part. There are several different ways to remove items from a list as well.<br><pre><code>>>> a_list = ['a', 'b', 'new', 'mpilgrim', 'new']\n>>> a_list[1]\n'b'\n>>> del a_list[1] \n>>> a_list\n['a', 'new', 'mpilgrim', 'new']\n>>> a_list[1] \n'new'</code></pre>	http://www.diveintopython3.net/native-datatypes.html#removingfromlists
Remove Items From A List	R	Removing Items From A List										
Removing Items From List	R	Removing Items From A List										
Remove Items From List	R	Removing Items From A List										
Removing Items From A List: Bonus Round	A							http://www.diveintopython3.net/native-datatypes.html			Another interesting list method is pop(). The pop() method is yet another way to remove items from a list, but with a twist.<br><pre><code>>>> a_list = ['a', 'b', 'new', 'mpilgrim']\n>>> a_list.pop() \n'mpilgrim'\n>>> a_list\n['a', 'b', 'new']\n>>> a_list.pop(1) \n'b'\n>>> a_list\n['a', 'new']\n>>> a_list.pop()\n'new'\n>>> a_list.pop()\n'a'\n>>> a_list.pop() \nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nIndexError: pop from empty list</code></pre>	http://www.diveintopython3.net/native-datatypes.html#popgoestheweasel
Remove Items From A List: Bonus Round	R	Removing Items From A List: Bonus Round										
Removing Items From List: Bonus Round	R	Removing Items From A List: Bonus Round										
Remove Items From List: Bonus Round	R	Removing Items From A List: Bonus Round										
Lists In A Boolean Context	A							http://www.diveintopython3.net/native-datatypes.html			You can also use a list in a boolean context, such as an if statement.<br><pre><code>>>> def is_it_true(anything):\n...   if anything:\n...     print("yes, it's true")\n...   else:\n...     print("no, it's false")\n...\n>>> is_it_true([]) \nno, it's false\n>>> is_it_true(['a']) \nyes, it's true\n>>> is_it_true([False]) \nyes, it's true</code></pre>	http://www.diveintopython3.net/native-datatypes.html#lists-in-a-boolean-context
Lists In Boolean Context	R	Lists In A Boolean Context										
Tuples In A Boolean Context	A							http://www.diveintopython3.net/native-datatypes.html			You can use tuples in a boolean context, such as an if statement.<br><pre><code>>>> def is_it_true(anything):\n...   if anything:\n...     print("yes, it's true")\n...   else:\n...     print("no, it's false")\n...\n>>> is_it_true(()) \nno, it's false\n>>> is_it_true(('a', 'b')) \nyes, it's true\n>>> is_it_true((False,)) \nyes, it's true\n>>> type((False)) \n<class 'bool'>\n>>> type((False,))\n<class 'tuple'></code></pre>	http://www.diveintopython3.net/native-datatypes.html#tuples-in-a-boolean-context
Tuples In Boolean Context	R	Tuples In A Boolean Context										
Assigning Multiple Values At Once	A							http://www.diveintopython3.net/native-datatypes.html			Here’s a cool programming shortcut: in Python, you can use a tuple to assign multiple values at once.<br><pre><code>>>> v = ('a', 2, True)\n>>> (x, y, z) = v \n>>> x\n'a'\n>>> y\n2\n>>> z\nTrue</code></pre>	http://www.diveintopython3.net/native-datatypes.html#multivar
Assign Multiple Values At Once	R	Assigning Multiple Values At Once										
Creating A Set	A							http://www.diveintopython3.net/native-datatypes.html			First things first. Creating a set is easy.<br><pre><code>>>> a_set = {1} \n>>> a_set\n{1}\n>>> type(a_set) \n<class 'set'>\n>>> a_set = {1, 2} \n>>> a_set\n{1, 2}</code></pre>	http://www.diveintopython3.net/native-datatypes.html#creating-a-set
Create A Set	R	Creating A Set										
Creating Set	R	Creating A Set										
Create Set	R	Creating A Set										
Modifying A Set	A							http://www.diveintopython3.net/native-datatypes.html			There are two different ways to add values to an existing set: the add() method, and the update() method.<br><pre><code>>>> a_set = {1, 2}\n>>> a_set.add(4) \n>>> a_set\n{1, 2, 4}\n>>> len(a_set) \n3\n>>> a_set.add(1) \n>>> a_set\n{1, 2, 4}\n>>> len(a_set) \n3</code></pre>	http://www.diveintopython3.net/native-datatypes.html#modifying-sets
Modify A Set	R	Modifying A Set										
Modifying Set	R	Modifying A Set										
Modify Set	R	Modifying A Set										
Removing Items From A Set	A							http://www.diveintopython3.net/native-datatypes.html			There are three ways to remove individual values from a set. The first two, discard() and remove(), have one subtle difference.<br><pre><code>>>> a_set = {1, 3, 6, 10, 15, 21, 28, 36, 45}\n>>> a_set\n{1, 3, 36, 6, 10, 45, 15, 21, 28}\n>>> a_set.discard(10) \n>>> a_set\n{1, 3, 36, 6, 45, 15, 21, 28}\n>>> a_set.discard(10) \n>>> a_set\n{1, 3, 36, 6, 45, 15, 21, 28}\n>>> a_set.remove(21) \n>>> a_set\n{1, 3, 36, 6, 45, 15, 28}\n>>> a_set.remove(21) \nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nKeyError: 21</code></pre>	http://www.diveintopython3.net/native-datatypes.html#removing-from-sets
Remove Items From A Set	R	Removing Items From A Set										
Removing Items From Set	R	Removing Items From A Set										
Remove Items From Set	R	Removing Items From A Set										
Common Set Operations	A							http://www.diveintopython3.net/native-datatypes.html			Python’s set type supports several common set operations.<br><pre><code>>>> a_set = {2, 4, 5, 9, 12, 21, 30, 51, 76, 127, 195}\n>>> 30 in a_set \nTrue\n>>> 31 in a_set\nFalse\n>>> b_set = {1, 2, 3, 5, 6, 8, 9, 12, 15, 17, 18, 21}\n>>> a_set.union(b_set) \n{1, 2, 195, 4, 5, 6, 8, 12, 76, 15, 17, 18, 3, 21, 30, 51, 9, 127}\n>>> a_set.intersection(b_set) \n{9, 2, 12, 5, 21}\n>>> a_set.difference(b_set) \n{195, 4, 76, 51, 30, 127}\n>>> a_set.symmetric_difference(b_set) \n{1, 3, 4, 6, 8, 76, 15, 17, 18, 195, 127, 30, 51}</code></pre>	http://www.diveintopython3.net/native-datatypes.html#common-set-operations
Sets In A Boolean Context	A							http://www.diveintopython3.net/native-datatypes.html			You can use sets in a boolean context, such as an if statement.<br><pre><code>>>> def is_it_true(anything):\n...   if anything:\n...     print("yes, it's true")\n...   else:\n...     print("no, it's false")\n...\n>>> is_it_true(set()) \nno, it's false\n>>> is_it_true({'a'}) \nyes, it's true\n>>> is_it_true({False}) \nyes, it's true</code></pre>	http://www.diveintopython3.net/native-datatypes.html#sets-in-a-boolean-context
Sets In Boolean Context	R	Sets In A Boolean Context										
Creating A Dictionary	A							http://www.diveintopython3.net/native-datatypes.html			Creating a dictionary is easy. The syntax is similar to sets, but instead of values, you have key-value pairs. Once you have a dictionary, you can look up values by their key.<br><pre><code>>>> a_dict = {'server': 'db.diveintopython3.org', 'database': 'mysql'} \n>>> a_dict\n{'server': 'db.diveintopython3.org', 'database': 'mysql'}\n>>> a_dict['server'] \n'db.diveintopython3.org'\n>>> a_dict['database'] \n'mysql'\n>>> a_dict['db.diveintopython3.org'] \nTraceback (most recent call last):\n  File "<stdin>", line 1, in <module>\nKeyError: 'db.diveintopython3.org'</code></pre>	http://www.diveintopython3.net/native-datatypes.html#creating-dictionaries
Create A Dictionary	R	Creating A Dictionary										
Creating Dictionary	R	Creating A Dictionary										
Create Dictionary	R	Creating A Dictionary										
Modifying A Dictionary	A							http://www.diveintopython3.net/native-datatypes.html			Dictionaries do not have any predefined size limit. You can add new key-value pairs to a dictionary at any time, or you can modify the value of an existing key.<br><pre><code>>>> a_dict\n{'server': 'db.diveintopython3.org', 'database': 'mysql'}\n>>> a_dict['database'] = 'blog' \n>>> a_dict\n{'server': 'db.diveintopython3.org', 'database': 'blog'}\n>>> a_dict['user'] = 'mark' \n>>> a_dict \n{'server': 'db.diveintopython3.org', 'user': 'mark', 'database': 'blog'}\n>>> a_dict['user'] = 'dora' \n>>> a_dict\n{'server': 'db.diveintopython3.org', 'user': 'dora', 'database': 'blog'}\n>>> a_dict['User'] = 'mark' \n>>> a_dict\n{'User': 'mark', 'server': 'db.diveintopython3.org', 'user': 'dora', 'database': 'blog'}</code></pre>	http://www.diveintopython3.net/native-datatypes.html#modifying-dictionaries
Modify A Dictionary	R	Modifying A Dictionary										
Modifying Dictionary	R	Modifying A Dictionary										
Modify Dictionary	R	Modifying A Dictionary										
Mixed-Value Dictionaries	A							http://www.diveintopython3.net/native-datatypes.html			Dictionaries aren’t just for strings. Dictionary values can be any datatype, including integers, booleans, arbitrary objects, or even other dictionaries. And within a single dictionary, the values don’t all need to be the same type; you can mix and match as needed. Dictionary keys are more restricted, but they can be strings, integers, and a few other types. You can also mix and match key datatypes within a dictionary.<br><pre><code>SUFFIXES = {1000: ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n            1024: ['KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB']}</code></pre>	http://www.diveintopython3.net/native-datatypes.html#mixed-value-dictionaries
Dictionaries In A Boolean Context	A							http://www.diveintopython3.net/native-datatypes.html			You can also use a dictionary in a boolean context, such as an if statement.<br><pre><code>>>> def is_it_true(anything):\n...   if anything:\n...     print("yes, it's true")\n...   else:\n...     print("no, it's false")\n...\n>>> is_it_true({}) \nno, it's false\n>>> is_it_true({'a': 1}) \nyes, it's true</code></pre>	http://www.diveintopython3.net/native-datatypes.html#dictionaries-in-a-boolean-context
Dictionaries In Boolean Context	R	Dictionaries In A Boolean Context										
None In A Boolean Context	A							http://www.diveintopython3.net/native-datatypes.html			In a boolean context, None is false and not None is true.<br><pre><code>>>> def is_it_true(anything):\n...   if anything:\n...     print("yes, it's true")\n...   else:\n...     print("no, it's false")\n...\n>>> is_it_true(None)\nno, it's false\n>>> is_it_true(not None)\nyes, it's true</code></pre>	http://www.diveintopython3.net/native-datatypes.html#none-in-a-boolean-context
None In Boolean Context	R	None In A Boolean Context										
